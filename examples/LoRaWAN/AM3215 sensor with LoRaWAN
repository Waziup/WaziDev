// This a test code to achieve low power using wazidev baord and WaziHAT MULTI pro

#include <Adafruit_AM2315.h>
#include <Arduino.h>
#include <lmic.h>
#include <hal/hal.h>
#include <SPI.h>
#include <Wire.h>
#include <LowPower.h>

// Connect RED of the AM2315 sensor to 5.0V
// Connect BLACK to Ground
// Connect WHITE to A5 clock
// Connect YELLOW to A4 data

Adafruit_AM2315 am2315;
//VOLTAGE LEVEL
int getAccurateVoltage() {
  readVcc();
  return readVcc();
}
int readVcc(void) {

  int result;

  ADCSRA = (1 << ADEN);
  ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  ADMUX = (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1);
  delay(1);               // Wait for ADC and Vref to settle
  ADCSRA |= (1 << ADSC);  // Start conversion
  while (bit_is_set(ADCSRA, ADSC))
    ;
  result = ADC;
  result = 1101824UL / (unsigned long)result;
  return result;  // Vcc in millivolts
}
static const PROGMEM u1_t NWKSKEY[16] = { 0x51, 0x14, 0xF5, 0x02, 0xD1, 0x3E, 0x29, 0xBB, 0xAE, 0x8C, 0xA9, 0x88, 0xE9, 0x57, 0x7F, 0xD5 };
static const u1_t PROGMEM APPSKEY[16] = { 0xC5, 0x18, 0x03, 0x7D, 0x48, 0x44, 0x5D, 0x14, 0xA9, 0x2C, 0xDD, 0x4C, 0xD2, 0x2D, 0xFA, 0xCF };
static const u4_t DEVADDR = 0x260B5F8C;  // <-- Change this address for every node!
void os_getArtEui(u1_t* buf) {}
void os_getDevEui(u1_t* buf) {}
void os_getDevKey(u1_t* buf) {}

// static uint8_t payload[6];
static osjob_t sendjob;

const unsigned TX_INTERVAL_MINUTES = 5;
const unsigned TX_INTERVAL = 60 * TX_INTERVAL_MINUTES;

const lmic_pinmap lmic_pins = {
  .nss = 10,
  .rxtx = LMIC_UNUSED_PIN,
  .rst = 4,
  .dio = { 2, 3, LMIC_UNUSED_PIN },
};
void printHex2(unsigned v) {
  v &= 0xff;
  if (v < 16)
    Serial.print('0');
  Serial.print(v, HEX);
}
void onEvent(ev_t ev) {
  Serial.print(os_getTime());
  Serial.print(": ");
  switch (ev) {
    case EV_SCAN_TIMEOUT:
      Serial.println(F("EV_SCAN_TIMEOUT"));
      break;
    case EV_BEACON_FOUND:
      Serial.println(F("EV_BEACON_FOUND"));
      break;
    case EV_BEACON_MISSED:
      Serial.println(F("EV_BEACON_MISSED"));
      break;
    case EV_BEACON_TRACKED:
      Serial.println(F("EV_BEACON_TRACKED"));
      break;
    case EV_JOINING:
      Serial.println(F("EV_JOINING"));
      break;
    case EV_JOINED:
      Serial.println(F("EV_JOINED"));
      break;
    case EV_RFU1:
      Serial.println(F("EV_RFU1"));
      break;
    case EV_JOIN_FAILED:
      Serial.println(F("EV_JOIN_FAILED"));
      break;
    case EV_REJOIN_FAILED:
      Serial.println(F("EV_REJOIN_FAILED"));
      break;
    case EV_TXCOMPLETE:
      Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));
      if (LMIC.txrxFlags & TXRX_ACK)
        Serial.println(F("Received ack"));
      if (LMIC.dataLen) {
        Serial.println(F("Received "));
        Serial.println(LMIC.dataLen);
        Serial.println(F(" bytes of payload"));
      }
      // Schedule next transmission
      os_setTimedCallback(&sendjob, os_getTime() + sec2osticks(TX_INTERVAL), do_send);
      break;
    case EV_LOST_TSYNC:
      Serial.println(F("EV_LOST_TSYNC"));
      break;
    case EV_RESET:
      Serial.println(F("EV_RESET"));
      break;
    case EV_RXCOMPLETE:
      // data received in ping slot
      Serial.println(F("EV_RXCOMPLETE"));
      break;
    case EV_LINK_DEAD:
      Serial.println(F("EV_LINK_DEAD"));
      break;
    case EV_LINK_ALIVE:
      Serial.println(F("EV_LINK_ALIVE"));
      break;
    default:
      Serial.println(F("Unknown event"));
      break;
  }
}
void do_send(osjob_t* j) {
  float temperature, humidity;


  if (!am2315.readTemperatureAndHumidity(&temperature, &humidity)) {
    Serial.println("Failed to read data from AM2315");
    return;
  }
  uint16_t temp = temperature * 100;
  uint16_t hum = humidity * 100;
  uint16_t voltage = getAccurateVoltage();
  byte payload[6];
  payload[0] = highByte(hum);
  payload[1] = lowByte(hum);
  payload[2] = highByte(temp);
  payload[3] = lowByte(temp);
  payload[4] = highByte(voltage);
  payload[5] = lowByte(voltage);  

  delay(2000);


  // Check if there is not a current TX/RX job running
  if (LMIC.opmode & OP_TXRXPEND) {
    Serial.println(F("OP_TXRXPEND, not sending"));
  } else {

    // Prepare upstream data transmission at the next possible time.
    LMIC_setTxData2(1, payload, sizeof(payload) - 1, 0);
    Serial.println(F("Packet queued"));
    //Measured Temperature, Humidity and Voltage level are displayed on the serial monitor
    Serial.println("The Humidity is : " + String(hum / 100) + " %");
    Serial.println("The Temperature is : " + String(temp / 100) + " degrees celcius");
    Serial.println("The Voltage is : " + String(voltage / 1000) + " Volts");
  }
  // Next TX is scheduled after TX_COMPLETE event.
}


void setup() {
  Serial.begin(38400);
  Serial.println(F("Starting"));
  Serial.println("AM2315 Test!");

  if (!am2315.begin()) {
    Serial.println("Sensor not found, check wiring & pullups!");
    while (1);      ;
  }

#ifdef VCC_ENABLE
  // For Pinoccio Scout boards
  pinMode(VCC_ENABLE, OUTPUT);
  digitalWrite(VCC_ENABLE, HIGH);
  delay(1000);
#endif

  // LMIC init
  os_init();
  // Reset the MAC state. Session and pending data transfers will be discarded.
  LMIC_reset();
#ifdef PROGMEM
  uint8_t appskey[sizeof(APPSKEY)];
  uint8_t nwkskey[sizeof(NWKSKEY)];
  memcpy_P(appskey, APPSKEY, sizeof(APPSKEY));
  memcpy_P(nwkskey, NWKSKEY, sizeof(NWKSKEY));
  LMIC_setSession(0x1, DEVADDR, nwkskey, appskey);
#else
  // If not running an AVR with PROGMEM, just use the arrays directly
  LMIC_setSession(0x1, DEVADDR, NWKSKEY, APPSKEY);
#endif

#if defined(CFG_eu868)
  LMIC_setupChannel(0, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7), BAND_CENTI);   // g-band
  LMIC_setupChannel(1, 868300000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);  // g-band
  LMIC_setupChannel(2, 868500000, DR_RANGE_MAP(DR_SF12, DR_SF7), BAND_CENTI);   // g-band
  LMIC_setupChannel(3, 867100000, DR_RANGE_MAP(DR_SF12, DR_SF7), BAND_CENTI);   // g-band
  LMIC_setupChannel(4, 867300000, DR_RANGE_MAP(DR_SF12, DR_SF7), BAND_CENTI);   // g-band
  LMIC_setupChannel(5, 867500000, DR_RANGE_MAP(DR_SF12, DR_SF7), BAND_CENTI);   // g-band
  LMIC_setupChannel(6, 867700000, DR_RANGE_MAP(DR_SF12, DR_SF7), BAND_CENTI);   // g-band
  LMIC_setupChannel(7, 867900000, DR_RANGE_MAP(DR_SF12, DR_SF7), BAND_CENTI);   // g-band
  LMIC_setupChannel(8, 868800000, DR_RANGE_MAP(DR_FSK, DR_FSK), BAND_MILLI);    // g2-band

#elif defined(CFG_us915)
  // NA-US channels 0-71 are configured automatically
  // but only one group of 8 should (a subband) should be active
  // TTN recommends the second sub band, 1 in a zero based count.
  // https://github.com/TheThingsNetwork/gateway-conf/blob/master/US-global_conf.json
  LMIC_selectSubBand(1);
#endif

  // Disable link check validation
  LMIC_setLinkCheckMode(0);

  // TTN uses SF9 for its RX2 window.
  LMIC.dn2Dr = DR_SF9;

  // Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
  LMIC_setDrTxpow(DR_SF7, 14);

  while (!Serial) {
    delay(10);
  }


  // Start job
  do_send(&sendjob);
}

void loop() {
  os_runloop_once();
}



///////////////////////////////////////////////////////////////////////////////////////////
//End device ID: mwam-dev-1
//DevEUI: 70B3D57ED0058DA0
// Device Address: 260B5F8C
//Appkey: C518037D48445D14A92CDD4CD22DFACF
//NwkKey: 5114F502D13E29BBAE8CA988E9577FD5

//Location -1.2329608228329678, 36.74694351597978

//****************Decode*******************8*******
// function Decoder(bytes, port) {
//   var humidity = (bytes[0] <<8) | bytes[1];
//   var temperature = (bytes[2] <<8 )  | bytes[3];
//   var voltage = (bytes[4] <<8)| bytes[5];
//   return{
//     humidity: hum/100,
//     temperature: temp/100,
//     voltage: voltage/1000
//   }
// }
//****************************************************
